name: Terraform Plan By PR/Dispatch

on:
  workflow_dispatch:
    inputs:
      stage:
        type: choice
        required: true
        options:
          - 'dev'
          - 'prod'
        default: 'dev'
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  stage: ${{ inputs.stage || 'dev' }}
  tf-base: terraform/environment

jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage || 'dev' }}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN }}
          aws-region: 'ap-northeast-1'
      - uses: hashicorp/setup-terraform@v3
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - run: pnpm install
      - id: build
        run: echo "dist=$(pnpm run --no-color --silent build)" >> $GITHUB_OUTPUT
      - id: tf-init
        run: terraform -chdir=${{ env.tf-base }}/${{ env.stage }} init
      - id: tf-validate
        run: terraform validate -no-color
      - id: tf-plan
        run: terraform -chdir=${{ env.tf-base }}/${{ env.stage }} plan -out=tfplan -no-color
        env:
          TF_VAR_dist_dir: ${{ steps.build.outputs.dist }}
          TF_VAR_twitter_api_key: ${{ secrets.TWITTER_API_KEY }}
          TF_VAR_twitter_api_secret: ${{ secrets.TWITTER_API_SECRET }}
          TF_VAR_twitter_access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TF_VAR_twitter_access_token_secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      - id: artifact-plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.stage }}
          path: ${{ env.tf-base }}/${{ env.stage }}/tfplan
      - id: artifact-dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ env.stage }}
          path: ${{ steps.build.outputs.dist }}
      - uses: actions/github-script@v8
        if: github.event_name == 'pull_request' && (success() || failure())
        env:
          PLAN: "${{ steps.tf-plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf-init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.tf-validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`
            ${{ steps.tf-validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.tf-plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: \`${{ github.actor }}\`, Stage: \`${{ env.stage }}\`*

            If you want to deploy this, please comment \`/deploy ${{ github.run_id }}\` on this PR.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            })
